<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CacheWriterNotFound" xml:space="preserve">
    <value />
    <comment>Not found any writer with the specified options.</comment>
  </data>
  <data name="ConfigurationFileNotFound" xml:space="preserve">
    <value />
    <comment>Configuration file not found. Check that the path exists and the file name is correct</comment>
  </data>
  <data name="DataSourceNotNull" xml:space="preserve">
    <value />
    <comment>'DataSource' can not be null. Make sure you have a valid 'DataSource'</comment>
  </data>
  <data name="EnumArgumentException" xml:space="preserve">
    <value />
    <comment>T must be an enumerated type</comment>
  </data>
  <data name="ErrorValidatingConfigurationFile" xml:space="preserve">
    <value />
    <comment>Error validating configuration file</comment>
  </data>
  <data name="FieldText" xml:space="preserve">
    <value />
    <comment>field</comment>
  </data>
  <data name="FilenameText" xml:space="preserve">
    <value />
    <comment>file</comment>
  </data>
  <data name="IdentifierText" xml:space="preserve">
    <value />
    <comment>Identifier</comment>
  </data>
  <data name="InputFileNotFound" xml:space="preserve">
    <value />
    <comment>Input file not found. Check that the path exists and the file name is correct</comment>
  </data>
  <data name="InvalidColor" xml:space="preserve">
    <value />
    <comment>Invalid Color</comment>
  </data>
  <data name="InvalidEnumArgumentException" xml:space="preserve">
    <value />
    <comment>The value of argument  'value' ({0}) is invalid for Enum type '{1}'</comment>
  </data>
  <data name="InvalidFieldDefinitionListText" xml:space="preserve">
    <value />
    <comment>Error in the fields definition</comment>
  </data>
  <data name="InvalidFieldNameText" xml:space="preserve">
    <value />
    <comment>Invalid field name</comment>
  </data>
  <data name="InvalidFileNameText" xml:space="preserve">
    <value />
    <comment>Invalid file name</comment>
  </data>
  <data name="InvalidIdentifierName" xml:space="preserve">
    <value />
    <comment>Invalid identifier name</comment>
  </data>
  <data name="InvalidIdentifierText" xml:space="preserve">
    <value />
    <comment>Invalid identifier</comment>
  </data>
  <data name="InvalidPathText" xml:space="preserve">
    <value />
    <comment>Invalid path</comment>
  </data>
  <data name="InvalidSerieDefinitionListText" xml:space="preserve">
    <value />
    <comment>List chart series with errors</comment>
  </data>
  <data name="InvalidStyleDefinitionListText" xml:space="preserve">
    <value />
    <comment>Error in the styles definition</comment>
  </data>
  <data name="InvalidStyleName" xml:space="preserve">
    <value />
    <comment>The style name can not be blank</comment>
  </data>
  <data name="MarkPageAsSync" xml:space="preserve">
    <value />
    <comment>Impossible to perform asynchronous operations with page {0}.
You must add the Async attribute to the page and set it to true to perform asynchronous operations.
Add or modify the Async attribute in page {0} at design time:
&lt;@ Page ..... Async = true ....... &gt;</comment>
  </data>
  <data name="MissingRootNode" xml:space="preserve">
    <value />
    <comment>Missing root node</comment>
  </data>
  <data name="ModelChartSerieDefinitionErrorText" xml:space="preserve">
    <value />
    <comment>Series error {0}</comment>
  </data>
  <data name="ModelChartSerieFieldDefinitionErrorText" xml:space="preserve">
    <value />
    <comment>  · {0}: {1} -&gt; Not found</comment>
  </data>
  <data name="ModelChartSeriesErrorCommentLine" xml:space="preserve">
    <value />
    <comment>Please, check if  in configuration file there is a field with this name, see label &lt;Fields&gt;</comment>
  </data>
  <data name="ModelErrorAttributeLine" xml:space="preserve">
    <value />
    <comment>· Attribute '{0}' : Identifier '{1}' not valid</comment>
  </data>
  <data name="ModelErrorCommentLine" xml:space="preserve">
    <value />
    <comment>Check {0}'s name, only allow strings containing letters, numbers and the following special characters '{1}'.</comment>
  </data>
  <data name="ModelErrorComplexElementLine" xml:space="preserve">
    <value />
    <comment>Element: &lt;{0}&gt;: '{1}' is invalid</comment>
  </data>
  <data name="ModelErrorHeaderText" xml:space="preserve">
    <value />
    <comment>Model error: {0}</comment>
  </data>
  <data name="ModelErrorSimpleElementLine" xml:space="preserve">
    <value />
    <comment>Element: &lt;{0}&gt;</comment>
  </data>
  <data name="ModelFieldNameValidSpecialChars" xml:space="preserve">
    <value />
    <comment>_ - * # @ % $</comment>
  </data>
  <data name="ModelFileNameError" xml:space="preserve">
    <value />
    <comment>Check the file name, make sure it does not contain any of the following special characters '{0}'.</comment>
  </data>
  <data name="ModelFileNameInvalidSpecialChars" xml:space="preserve">
    <value />
    <comment>&lt; &gt; | " : * \ ? /</comment>
  </data>
  <data name="ModelFixedFieldDefinitionErrorText" xml:space="preserve">
    <value />
    <comment>· The fixed-width field '{0}' is not defined, check the list of definition of fixed-width fields, please see label &lt;Fixed&gt;.</comment>
  </data>
  <data name="ModelGroupFieldDefinitionErrorText" xml:space="preserve">
    <value />
    <comment>· Group field '{0}' is not defined, check the definition list of groups, please see label &lt;Groups&gt;</comment>
  </data>
  <data name="ModelIdentifierValidSpecialChars" xml:space="preserve">
    <value />
    <comment>_ - # @ % $</comment>
  </data>
  <data name="ModelPathNameValidSpecialChars" xml:space="preserve">
    <value />
    <comment>_ - # @ % $</comment>
  </data>
  <data name="ModelPieceDefinitionErrorText" xml:space="preserve">
    <value />
    <comment>· The piece '{0}' of fixed-width field '{1}' is not defined, check the parts list for the definition of fixed-width field, please see label &lt;Pieces&gt;.</comment>
  </data>
  <data name="ModelStyleErrorCommentLine" xml:space="preserve">
    <value />
    <comment>Please, check if  in configuration file there is a style with this name, see label &lt;Styles&gt;</comment>
  </data>
  <data name="OutputFileNotFound" xml:space="preserve">
    <value />
    <comment>Output file not found. Check that the path exists and the file name is correct</comment>
  </data>
  <data name="PathNotNull" xml:space="preserve">
    <value />
    <comment>Path can't be null</comment>
  </data>
  <data name="PathText" xml:space="preserve">
    <value />
    <comment>path</comment>
  </data>
  <data name="PieceArgumentOutOfRange" xml:space="preserve">
    <value />
    <comment>value greater than 0</comment>
  </data>
  <data name="PiecesReferenceNull" xml:space="preserve">
    <value />
    <comment>The 'Reference' property of 'pieces' object which contains this 'piece' object doesn't exist. Make sure that exist or is well written.</comment>
  </data>
  <data name="ShadowTransparencyPropertyValueOutOfRange" xml:space="preserve">
    <value />
    <comment>Illegal value. The Transparency property value must be between 0.0 and 1.0</comment>
  </data>
  <data name="StyleErrorFormatMessageFieldLine" xml:space="preserve">
    <value />
    <comment>- Field: {0} - {1}</comment>
  </data>
  <data name="StyleErrorFormatMessageHeader" xml:space="preserve">
    <value />
    <comment>Error in the style definition of the fields</comment>
  </data>
  <data name="StyleErrorFormatMessageNotFound" xml:space="preserve">
    <value />
    <comment>  · {0}: {1} -&gt;Style not found</comment>
  </data>
  <data name="TransformFileNotFound" xml:space="preserve">
    <value />
    <comment>Transform file not found. Check that the path exists and the file name is correct</comment>
  </data>
  <data name="TransformOperationError" xml:space="preserve">
    <value />
    <comment>There was an error while trying to perform the transformation, check that the writer generates a valid transformation.</comment>
  </data>
  <data name="XsdSchemaNotFound" xml:space="preserve">
    <value />
    <comment>xsd file not found</comment>
  </data>
</root>